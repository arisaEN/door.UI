@page "/"
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using door.Infrastructure.DTO
@using door.Infrastructure
@using door.Infrastructure.SQLite
@inject DoorDbContext DbContext

<h3>データエントリー一覧</h3>

@if (dataEntries == null)
{
    <p>データを取得中...</p>
}
else if (!dataEntries.Any())
{
    <p>データがありません。</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@(typeof(DataEntryDTO).GetProperty(nameof(DataEntryDTO.Id))?.GetCustomAttribute<DisplayAttribute>()?.Name ?? "ID")</th>
                <th>@(typeof(DataEntryDTO).GetProperty(nameof(DataEntryDTO.Date))?.GetCustomAttribute<DisplayAttribute>()?.Name ?? "Date")</th>
                <th>@(typeof(DataEntryDTO).GetProperty(nameof(DataEntryDTO.Time))?.GetCustomAttribute<DisplayAttribute>()?.Name ?? "Time")</th>
                <th>@(typeof(DataEntryDTO).GetProperty(nameof(DataEntryDTO.StatusName))?.GetCustomAttribute<DisplayAttribute>()?.Name ?? "Status")</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in dataEntries)
            {
                <tr>
                    <td>@entry.Id</td>
                    <td>@entry.Date</td>
                    <td>@entry.Time</td>
                    <td>@entry.StatusName</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DataEntryDTO>? dataEntries;

    protected override async Task OnInitializedAsync()
    {
        DataEntrySQLiteService dataEntryService = new DataEntrySQLiteService(DbContext);
        dataEntries = await dataEntryService.GetDataEntryAsync();
    }
}